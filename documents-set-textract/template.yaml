AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters: 
  NumberOfIteration: 
    Type: Number
    Default: 30

Description: >
  documents-set-textract
Metadata:
  AWS::ServerlessRepo::Application:
    Name: DocumentsSetTextract
    Description: Extends Amazon Textract to support batch of documents from Scanner in random orientation and random order within one submission.
    Author: Cyrus Wong
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['Textract','Rekognition']
    HomePageUrl: https://github.com/wongcyrus/DocumentsSetTextract
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/wongcyrus/DocumentsSetTextract
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 300
    Handler: app.lambdaHandler
    Tracing: Active
    Environment:
      Variables:
        ImagesBucket: !Ref ImagesBucket
        TextractBucket: !Ref TextractBucket
Resources:
  StartDocumentStateMachine:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: start-document-state-machine/
      Policies: 
        - AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      Environment:
        Variables:
          StateMachineArn: !Ref DocumentStateMachine
      Events:
        PdfUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref PdfBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  -
                    Name: "suffix"
                    Value: ".pdf"

  ConvertPdfToImages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pdf-to-images/
      Timeout: 900
      MemorySize: 1024
      Policies: AWSLambdaExecute
      Layers:
        - arn:aws:lambda:us-east-1:764866452798:layer:ghostscript:8
        - !Ref ImageMagickLayer 

  CombineImagesToPdf:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: images-to-pdf/
      Timeout: 900
      MemorySize: 1024
      Policies: AWSLambdaExecute
      Layers:
        - !Ref PdfKitLayer

  SharpLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/sharp
      CompatibleRuntimes:
        - nodejs10.x
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Delete     
      
  PdfKitLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/pdfkit
      CompatibleRuntimes:
        - nodejs10.x
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Delete   

  ImageMagickLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: image-magick
      Description: Static build of ImageMagick for AWS Linux 2,
      ContentUri: layers/layer.zip
      CompatibleRuntimes:
        - nodejs10.x
        - nodejs12.x
        - python3.8
      LicenseInfo: https://imagemagick.org/script/license.php
      RetentionPolicy: Delete
      
  AnalyzeDocumentImages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: analyze-document-images/
      MemorySize: 1024
      Policies: 
        - AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess

  CorrectImageOrientation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: correct-image-orientation/
      MemorySize: 1024
      Layers:
        - !Ref SharpLayer       
      Policies: 
        - AWSLambdaExecute
        
  Iterator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: iterator/
      
  TextractCompletedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "TextractCompletionTopic"
      
  StartDocumentAnalysis:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: start-document-analysis/
      Policies: 
        - AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess
      Environment:
        Variables:
          TextractCompletedTopicArn: !Ref TextractCompletedTopic
          TextractExecutionRoleArn: !GetAtt [ TextractExecutionRole, Arn ] 
          
  GetDocumentAnalysis:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-document-analysis/  
      Policies: 
        - AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess

  GeneratePageKeyValuePair:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: generate-page-key-value-pair/  
      MemorySize: 2048
      Policies: 
        - AWSLambdaExecute
        
  JsonToExcel:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: json-to-excel/  
      MemorySize: 2048
      Policies: 
        - AWSLambdaExecute

  TextractExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - textract.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - SNS:Publish
            Resource: !Ref TextractCompletedTopic
      
  DocumentStatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  DocumentStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Documents Set Textract State Machine",
              "StartAt": "Convert PDF to Images",
              "States": {
                "Convert PDF to Images": {
                  "Type": "Task",
                  "Resource": "${ConvertPdfToImages}",
                  "Next": "Analyze Document Images"
                },
                "Analyze Document Images": {
                  "Type": "Task",
                  "Resource": "${AnalyzeDocumentImages}",
                  "Next": "Correct Image Orientation"
                },
                "Correct Image Orientation": {
                  "Type": "Task",
                  "Resource": "${CorrectImageOrientation}",
                  "Next": "Wait 5 seconds"
                },
                "Wait 5 seconds": {
                  "Type": "Wait",
                  "Seconds": 5,
                  "Next": "Combine Images To Pdf"
                },
                "Combine Images To Pdf": {
                  "Type": "Task",
                  "Resource": "${CombineImagesToPdf}",
                  "Next": "Start Document Analysis"
                },                
                "Start Document Analysis": {
                  "Type": "Task",
                  "Resource": "${StartDocumentAnalysis}",
                  "Next": "Configure Count",
                  "Retry": [ {
                      "ErrorEquals": [ "LimitExceededException", "ProvisionedThroughputExceededException"],
                      "IntervalSeconds": 10,
                      "BackoffRate": 2.0,
                      "MaxAttempts": 3
                  }]
                },
                "Configure Count": {
                    "Type": "Pass",
                    "InputPath": "$.JobId",
                    "Result": {
                        "count": ${NumberOfIteration},
                        "index": 0,
                        "step": 1
                    },
                    "ResultPath": "$.iterator",
                    "Next": "Iterator"
                  },
                  "Iterator": {
                      "Type": "Task",
                      "Resource": "${Iterator}",
                      "ResultPath": "$.iterator",
                      "Next": "Is Count Reached Or Succeeded"
                  },
                  "Is Count Reached Or Succeeded": {
                      "Type": "Choice",
                      "Choices": [
                          {
                              "Variable": "$.iterator.continue",
                              "BooleanEquals": true,
                              "Next": "Get Document Analysis"
                          }
                      ],
                      "Default": "Finish Document Analysis"
                  },
                  "Get Document Analysis": {
                      "Type": "Task",
                      "Resource": "${GetDocumentAnalysis}",
                      "Next": "Wait 10 seconds"
                  },
                  "Wait 10 seconds": {
                    "Type": "Wait",
                    "Seconds": 10,
                    "Next": "Iterator"
                  },
                  "Finish Document Analysis": {
                    "Type": "Pass",
                    "OutputPath": "$.resultKey", 
                    "Next": "Generate Page Key Value Pair"
                  }, 
                  "Generate Page Key Value Pair": {
                    "Type": "Task",
                    "Resource": "${GeneratePageKeyValuePair}",
                    "Next": "Json To Excel",
                    "Retry": [ {
                        "ErrorEquals": [ "SyntaxError"],
                        "IntervalSeconds": 10,
                        "BackoffRate": 2.0,
                        "MaxAttempts": 3
                    }]
                  },
                  "Json To Excel": {
                    "Type": "Task",
                    "Resource": "${JsonToExcel}",
                    "Next": "SuccessState"
                  },
                  "SuccessState": {
                    "Type": "Succeed"
                  }
              }
            }
          - 
            StartDocumentAnalysis: !GetAtt [ StartDocumentAnalysis, Arn ]
            ConvertPdfToImages: !GetAtt [ ConvertPdfToImages, Arn ]
            AnalyzeDocumentImages: !GetAtt [ AnalyzeDocumentImages, Arn ]
            GetDocumentAnalysis: !GetAtt [ GetDocumentAnalysis, Arn ]
            Iterator: !GetAtt [ Iterator, Arn ]
            JsonToExcel: !GetAtt [ JsonToExcel, Arn ]
            GeneratePageKeyValuePair: !GetAtt [ GeneratePageKeyValuePair, Arn ]
            CorrectImageOrientation: !GetAtt [ CorrectImageOrientation, Arn ]
            CombineImagesToPdf: !GetAtt [ CombineImagesToPdf, Arn ]
      RoleArn: !GetAtt [ DocumentStatesExecutionRole, Arn ]
      
  PdfBucket:
    Type: AWS::S3::Bucket
    
  ImagesBucket:
    Type: AWS::S3::Bucket
  
  TextractBucket:
    Type: AWS::S3::Bucket
    

