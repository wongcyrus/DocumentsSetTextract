AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters: 
  NumberOfIteration: 
    Type: Number
    Default: 30

Description: >
  documents-set-textract
Metadata:
  AWS::ServerlessRepo::Application:
    Name: DocumentsSetTextract
    Description: Extends Amazon Textract to support batch of documents from Scanner in random orientation and random order within one submission.
    Author: Cyrus Wong
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['Textract','Rekognition']
    HomePageUrl: https://github.com/wongcyrus/DocumentsSetTextract
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/wongcyrus/DocumentsSetTextract
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 300
    Handler: app.lambdaHandler
    Tracing: Active
    Environment:
      Variables:
        ImagesBucket: !Ref ImagesBucket
        TextractBucket: !Ref TextractBucket
Resources:
  StartDocumentStateMachine:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: start-document-state-machine/
      Policies: 
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref ImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref TextractBucket  
        - S3CrudPolicy:
            BucketName: !Sub "docsettextract-${AWS::AccountId}-pdfbucket"            
      Environment:
        Variables:
          StateMachineArn: !Ref DocumentStateMachine
      Events:
        PdfUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref PdfBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  -
                    Name: "suffix"
                    Value: ".pdf"

  ConvertPdfToImages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pdf-to-images/
      Timeout: 900
      MemorySize: 1024
      Policies: 
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref ImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref TextractBucket  
        - S3CrudPolicy:
            BucketName: !Sub "docsettextract-${AWS::AccountId}-pdfbucket"  
      Layers:
        - arn:aws:lambda:us-east-1:764866452798:layer:ghostscript:8
        - !Ref ImageMagickLayer 

  CombineImagesToPdf:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: images-to-pdf/
      Timeout: 900
      MemorySize: 1024
      Policies: 
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref ImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref TextractBucket  
        - S3CrudPolicy:
            BucketName: !Sub "docsettextract-${AWS::AccountId}-pdfbucket"  
      Layers:
        - !Ref PdfKitLayer

  SharpLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/sharp
      CompatibleRuntimes:
        - nodejs10.x
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Delete     
      
  PdfKitLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/pdfkit
      CompatibleRuntimes:
        - nodejs10.x
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Delete   

  ImageMagickLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: image-magick
      Description: Static build of ImageMagick for AWS Linux 2,
      ContentUri: layers/layer.zip
      CompatibleRuntimes:
        - nodejs10.x
        - nodejs12.x
        - python3.8
      LicenseInfo: https://imagemagick.org/script/license.php
      RetentionPolicy: Delete
      
  AnalyzeDocumentImages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: analyze-document-images/
      MemorySize: 1024
      Policies: 
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref ImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref TextractBucket  
        - S3CrudPolicy:
            BucketName: !Sub "docsettextract-${AWS::AccountId}-PdfBucket"
        - arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess

  CorrectImageOrientation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: correct-image-orientation/
      MemorySize: 1024
      Layers:
        - !Ref SharpLayer       
      Policies: 
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref ImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref TextractBucket  
        - S3CrudPolicy:
            BucketName: !Sub "docsettextract-${AWS::AccountId}-pdfbucket"          

  TextractCompletedTopic:
    Type: AWS::SNS::Topic

  StartDocumentAnalysis:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: start-document-analysis/
      Policies: 
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref ImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref TextractBucket  
        - S3CrudPolicy:
            BucketName: !Sub "docsettextract-${AWS::AccountId}-PdfBucket"
        - DynamoDBWritePolicy:
            TableName: !Ref SessionTable            
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess
      Environment:
        Variables:
          TextractCompletedTopicArn: !Ref TextractCompletedTopic
          TextractExecutionRoleArn: !GetAtt [ TextractExecutionRole, Arn ] 
          AsynTextractQueue: !Ref AsynTextractQueue
          SessionTable: !Ref SessionTable
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AsynTextractQueue.Arn
            BatchSize: 1          
          
  GeneratePageKeyValuePair:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: generate-page-key-value-pair/  
      MemorySize: 2048
      Policies: 
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref ImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref TextractBucket  
        - S3CrudPolicy:
            BucketName: !Sub "docsettextract-${AWS::AccountId}-pdfbucket"  
            
  JsonToExcel:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: json-to-excel/  
      MemorySize: 2048
      Policies: 
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref ImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref TextractBucket  
        - S3FullAccessPolicy:
            BucketName: !Sub "docsettextract-${AWS::AccountId}-pdfbucket"  

  SendTaskCompleteFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: send-task-complete/  
      Policies:
        - AWSLambdaBasicExecutionRole      
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
               - states:SendTaskSuccess
               - states:SendTaskFailure
              Resource: !Ref DocumentStateMachine
        - DynamoDBReadPolicy:
            TableName: !Ref SessionTable
        - S3CrudPolicy:
            BucketName: !Ref TextractBucket  
        - S3CrudPolicy:
            BucketName: !Sub "docsettextract-${AWS::AccountId}-pdfbucket"  
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess            
      Environment:
        Variables:
          SessionTable: !Ref SessionTable            
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref TextractCompletedTopic
  
  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
        
    
  AsynTextractQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt AsynTextractDeadLetterQueue.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 300        
  AsynTextractDeadLetterQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      FifoQueue: true
      ContentBasedDeduplication: true      
      
  TextractExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - textract.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - SNS:Publish
            Resource: !Ref TextractCompletedTopic
      
  DocumentStatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: 
                  - !Ref DocumentsSetTextractCompletionSNSTopic
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: 
                  - !GetAtt [ StartDocumentAnalysis, Arn ]
                  - !GetAtt [ ConvertPdfToImages, Arn ]
                  - !GetAtt [ AnalyzeDocumentImages, Arn ]
                  - !GetAtt [ JsonToExcel, Arn ]
                  - !GetAtt [ GeneratePageKeyValuePair, Arn ]
                  - !GetAtt [ CorrectImageOrientation, Arn ]
                  - !GetAtt [ CombineImagesToPdf, Arn ]
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt AsynTextractQueue.Arn
                
  DocumentsSetTextractCompletionSNSTopic:
    Type: AWS::SNS::Topic
      
  DocumentStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/docset-textract.asl.json
      DefinitionSubstitutions:
        AsynTextractQueue: !Ref AsynTextractQueue
        ConvertPdfToImages: !GetAtt [ ConvertPdfToImages, Arn ]
        AnalyzeDocumentImages: !GetAtt [ AnalyzeDocumentImages, Arn ]
        JsonToExcel: !GetAtt [ JsonToExcel, Arn ]
        GeneratePageKeyValuePair: !GetAtt [ GeneratePageKeyValuePair, Arn ]
        CorrectImageOrientation: !GetAtt [ CorrectImageOrientation, Arn ]
        CombineImagesToPdf: !GetAtt [ CombineImagesToPdf, Arn ]
        DocumentsSetTextractCompletionSNSTopic: !Ref DocumentsSetTextractCompletionSNSTopic
      Role: !GetAtt [ DocumentStatesExecutionRole, Arn ]
      
  PdfBucket:
    Type: AWS::S3::Bucket
    Properties:
        BucketName: !Sub "docsettextract-${AWS::AccountId}-pdfbucket"    
    
  ImagesBucket:
    Type: AWS::S3::Bucket
  
  TextractBucket:
    Type: AWS::S3::Bucket
Outputs:
  DocumentsSetTextractCompletionSNSTopic:
    Description: Documents Set Textract Completion SNS Topic
    Value: !Ref DocumentsSetTextractCompletionSNSTopic  
  PdfBucket:
    Description: Upload PDF to trigger Documents Set Textract.
    Value: !Ref PdfBucket

